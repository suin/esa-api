/* tslint:disable */
/* eslint-disable */
/**
 * esa API v1
 * チームのナレッジ共有サービス[esa.io](https://esa.io/)のAPI v1の仕様書
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { NewStar } from "../models";
// @ts-ignore
import { PaginatedStargazers } from "../models";
/**
 * StarApi - axios parameter creator
 * @export
 */
export const StarApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * 指定されたコメントにStarをしたユーザ一覧を取得します。
     * @summary コメントのStarを取得する
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommentStargazers: async (
      teamName: string,
      commentId: number,
      page?: number,
      perPage?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("getCommentStargazers", "teamName", teamName);
      // verify required parameter 'commentId' is not null or undefined
      assertParamExists("getCommentStargazers", "commentId", commentId);
      const localVarPath = `/teams/{team_name}/comments/{comment_id}/stargazers`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration,
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration,
      );

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定された記事にStarをしたユーザ一覧を取得します。
     * @summary 記事のStarを取得する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostStargazers: async (
      teamName: string,
      postNumber: number,
      page?: number,
      perPage?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("getPostStargazers", "teamName", teamName);
      // verify required parameter 'postNumber' is not null or undefined
      assertParamExists("getPostStargazers", "postNumber", postNumber);
      const localVarPath = `/teams/{team_name}/posts/{post_number}/stargazers`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"post_number"}}`, encodeURIComponent(String(postNumber)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration,
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration,
      );

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定されたコメントにStarをします。
     * @summary コメントをStarする
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {NewStar} newStar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    starComment: async (
      teamName: string,
      commentId: number,
      newStar: NewStar,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("starComment", "teamName", teamName);
      // verify required parameter 'commentId' is not null or undefined
      assertParamExists("starComment", "commentId", commentId);
      // verify required parameter 'newStar' is not null or undefined
      assertParamExists("starComment", "newStar", newStar);
      const localVarPath = `/teams/{team_name}/comments/{comment_id}/star`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration,
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        newStar,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定された記事にStarをします。
     * @summary 記事をStarする
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {NewStar} newStar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    starPost: async (
      teamName: string,
      postNumber: number,
      newStar: NewStar,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("starPost", "teamName", teamName);
      // verify required parameter 'postNumber' is not null or undefined
      assertParamExists("starPost", "postNumber", postNumber);
      // verify required parameter 'newStar' is not null or undefined
      assertParamExists("starPost", "newStar", newStar);
      const localVarPath = `/teams/{team_name}/posts/{post_number}/star`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"post_number"}}`, encodeURIComponent(String(postNumber)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration,
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        newStar,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定されたコメントへのStarを取り消します。
     * @summary コメントのStarを取り消す
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unstarComment: async (
      teamName: string,
      commentId: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("unstarComment", "teamName", teamName);
      // verify required parameter 'commentId' is not null or undefined
      assertParamExists("unstarComment", "commentId", commentId);
      const localVarPath = `/teams/{team_name}/comments/{comment_id}/star`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration,
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定された記事へのStarを取り消します。
     * @summary 記事のStarを取り消す
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unstarPost: async (
      teamName: string,
      postNumber: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("unstarPost", "teamName", teamName);
      // verify required parameter 'postNumber' is not null or undefined
      assertParamExists("unstarPost", "postNumber", postNumber);
      const localVarPath = `/teams/{team_name}/posts/{post_number}/star`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"post_number"}}`, encodeURIComponent(String(postNumber)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration,
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * StarApi - functional programming interface
 * @export
 */
export const StarApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = StarApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定されたコメントにStarをしたユーザ一覧を取得します。
     * @summary コメントのStarを取得する
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCommentStargazers(
      teamName: string,
      commentId: number,
      page?: number,
      perPage?: number,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedStargazers>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCommentStargazers(
          teamName,
          commentId,
          page,
          perPage,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * 指定された記事にStarをしたユーザ一覧を取得します。
     * @summary 記事のStarを取得する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPostStargazers(
      teamName: string,
      postNumber: number,
      page?: number,
      perPage?: number,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedStargazers>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getPostStargazers(
          teamName,
          postNumber,
          page,
          perPage,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * 指定されたコメントにStarをします。
     * @summary コメントをStarする
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {NewStar} newStar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async starComment(
      teamName: string,
      commentId: number,
      newStar: NewStar,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.starComment(
        teamName,
        commentId,
        newStar,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * 指定された記事にStarをします。
     * @summary 記事をStarする
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {NewStar} newStar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async starPost(
      teamName: string,
      postNumber: number,
      newStar: NewStar,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.starPost(
        teamName,
        postNumber,
        newStar,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * 指定されたコメントへのStarを取り消します。
     * @summary コメントのStarを取り消す
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unstarComment(
      teamName: string,
      commentId: number,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.unstarComment(
        teamName,
        commentId,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     * 指定された記事へのStarを取り消します。
     * @summary 記事のStarを取り消す
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unstarPost(
      teamName: string,
      postNumber: number,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.unstarPost(
        teamName,
        postNumber,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * StarApi - factory interface
 * @export
 */
export const StarApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = StarApiFp(configuration);
  return {
    /**
     * 指定されたコメントにStarをしたユーザ一覧を取得します。
     * @summary コメントのStarを取得する
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommentStargazers(
      teamName: string,
      commentId: number,
      page?: number,
      perPage?: number,
      options?: any,
    ): AxiosPromise<PaginatedStargazers> {
      return localVarFp
        .getCommentStargazers(teamName, commentId, page, perPage, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定された記事にStarをしたユーザ一覧を取得します。
     * @summary 記事のStarを取得する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostStargazers(
      teamName: string,
      postNumber: number,
      page?: number,
      perPage?: number,
      options?: any,
    ): AxiosPromise<PaginatedStargazers> {
      return localVarFp
        .getPostStargazers(teamName, postNumber, page, perPage, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定されたコメントにStarをします。
     * @summary コメントをStarする
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {NewStar} newStar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    starComment(
      teamName: string,
      commentId: number,
      newStar: NewStar,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .starComment(teamName, commentId, newStar, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定された記事にStarをします。
     * @summary 記事をStarする
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {NewStar} newStar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    starPost(
      teamName: string,
      postNumber: number,
      newStar: NewStar,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .starPost(teamName, postNumber, newStar, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定されたコメントへのStarを取り消します。
     * @summary コメントのStarを取り消す
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unstarComment(
      teamName: string,
      commentId: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .unstarComment(teamName, commentId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定された記事へのStarを取り消します。
     * @summary 記事のStarを取り消す
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unstarPost(
      teamName: string,
      postNumber: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .unstarPost(teamName, postNumber, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for getCommentStargazers operation in StarApi.
 * @export
 * @interface StarApiGetCommentStargazersRequest
 */
export interface StarApiGetCommentStargazersRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof StarApiGetCommentStargazers
   */
  readonly teamName: string;

  /**
   * コメントID
   * @type {number}
   * @memberof StarApiGetCommentStargazers
   */
  readonly commentId: number;

  /**
   * ページ番号
   * @type {number}
   * @memberof StarApiGetCommentStargazers
   */
  readonly page?: number;

  /**
   * 1ページあたりに含まれる要素数
   * @type {number}
   * @memberof StarApiGetCommentStargazers
   */
  readonly perPage?: number;
}

/**
 * Request parameters for getPostStargazers operation in StarApi.
 * @export
 * @interface StarApiGetPostStargazersRequest
 */
export interface StarApiGetPostStargazersRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof StarApiGetPostStargazers
   */
  readonly teamName: string;

  /**
   * 記事ID
   * @type {number}
   * @memberof StarApiGetPostStargazers
   */
  readonly postNumber: number;

  /**
   * ページ番号
   * @type {number}
   * @memberof StarApiGetPostStargazers
   */
  readonly page?: number;

  /**
   * 1ページあたりに含まれる要素数
   * @type {number}
   * @memberof StarApiGetPostStargazers
   */
  readonly perPage?: number;
}

/**
 * Request parameters for starComment operation in StarApi.
 * @export
 * @interface StarApiStarCommentRequest
 */
export interface StarApiStarCommentRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof StarApiStarComment
   */
  readonly teamName: string;

  /**
   * コメントID
   * @type {number}
   * @memberof StarApiStarComment
   */
  readonly commentId: number;

  /**
   *
   * @type {NewStar}
   * @memberof StarApiStarComment
   */
  readonly newStar: NewStar;
}

/**
 * Request parameters for starPost operation in StarApi.
 * @export
 * @interface StarApiStarPostRequest
 */
export interface StarApiStarPostRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof StarApiStarPost
   */
  readonly teamName: string;

  /**
   * 記事ID
   * @type {number}
   * @memberof StarApiStarPost
   */
  readonly postNumber: number;

  /**
   *
   * @type {NewStar}
   * @memberof StarApiStarPost
   */
  readonly newStar: NewStar;
}

/**
 * Request parameters for unstarComment operation in StarApi.
 * @export
 * @interface StarApiUnstarCommentRequest
 */
export interface StarApiUnstarCommentRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof StarApiUnstarComment
   */
  readonly teamName: string;

  /**
   * コメントID
   * @type {number}
   * @memberof StarApiUnstarComment
   */
  readonly commentId: number;
}

/**
 * Request parameters for unstarPost operation in StarApi.
 * @export
 * @interface StarApiUnstarPostRequest
 */
export interface StarApiUnstarPostRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof StarApiUnstarPost
   */
  readonly teamName: string;

  /**
   * 記事ID
   * @type {number}
   * @memberof StarApiUnstarPost
   */
  readonly postNumber: number;
}

/**
 * StarApi - object-oriented interface
 * @export
 * @class StarApi
 * @extends {BaseAPI}
 */
export class StarApi extends BaseAPI {
  /**
   * 指定されたコメントにStarをしたユーザ一覧を取得します。
   * @summary コメントのStarを取得する
   * @param {StarApiGetCommentStargazersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StarApi
   */
  public getCommentStargazers(
    requestParameters: StarApiGetCommentStargazersRequest,
    options?: any,
  ) {
    return StarApiFp(this.configuration)
      .getCommentStargazers(
        requestParameters.teamName,
        requestParameters.commentId,
        requestParameters.page,
        requestParameters.perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定された記事にStarをしたユーザ一覧を取得します。
   * @summary 記事のStarを取得する
   * @param {StarApiGetPostStargazersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StarApi
   */
  public getPostStargazers(
    requestParameters: StarApiGetPostStargazersRequest,
    options?: any,
  ) {
    return StarApiFp(this.configuration)
      .getPostStargazers(
        requestParameters.teamName,
        requestParameters.postNumber,
        requestParameters.page,
        requestParameters.perPage,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定されたコメントにStarをします。
   * @summary コメントをStarする
   * @param {StarApiStarCommentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StarApi
   */
  public starComment(
    requestParameters: StarApiStarCommentRequest,
    options?: any,
  ) {
    return StarApiFp(this.configuration)
      .starComment(
        requestParameters.teamName,
        requestParameters.commentId,
        requestParameters.newStar,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定された記事にStarをします。
   * @summary 記事をStarする
   * @param {StarApiStarPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StarApi
   */
  public starPost(requestParameters: StarApiStarPostRequest, options?: any) {
    return StarApiFp(this.configuration)
      .starPost(
        requestParameters.teamName,
        requestParameters.postNumber,
        requestParameters.newStar,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定されたコメントへのStarを取り消します。
   * @summary コメントのStarを取り消す
   * @param {StarApiUnstarCommentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StarApi
   */
  public unstarComment(
    requestParameters: StarApiUnstarCommentRequest,
    options?: any,
  ) {
    return StarApiFp(this.configuration)
      .unstarComment(
        requestParameters.teamName,
        requestParameters.commentId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定された記事へのStarを取り消します。
   * @summary 記事のStarを取り消す
   * @param {StarApiUnstarPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StarApi
   */
  public unstarPost(
    requestParameters: StarApiUnstarPostRequest,
    options?: any,
  ) {
    return StarApiFp(this.configuration)
      .unstarPost(
        requestParameters.teamName,
        requestParameters.postNumber,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
