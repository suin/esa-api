/* tslint:disable */
/* eslint-disable */
/**
 * esa API v1
 * チームのナレッジ共有サービス[esa.io](https://esa.io/)のAPI v1の仕様書
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { BatchMoveOptions } from "../models";
// @ts-ignore
import { BatchMoveResult } from "../models";
/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 指定されたカテゴリを配下のカテゴリを含めて一括で変更します。
     * @summary カテゴリを一括移動する
     * @param {string} teamName チーム名
     * @param {BatchMoveOptions} batchMoveOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchMoveCategory: async (
      teamName: string,
      batchMoveOptions: BatchMoveOptions,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("batchMoveCategory", "teamName", teamName);
      // verify required parameter 'batchMoveOptions' is not null or undefined
      assertParamExists(
        "batchMoveCategory",
        "batchMoveOptions",
        batchMoveOptions
      );
      const localVarPath = `/teams/{team_name}/categories/batch_move`.replace(
        `{${"team_name"}}`,
        encodeURIComponent(String(teamName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        batchMoveOptions,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定されたカテゴリを配下のカテゴリを含めて一括で変更します。
     * @summary カテゴリを一括移動する
     * @param {string} teamName チーム名
     * @param {BatchMoveOptions} batchMoveOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchMoveCategory(
      teamName: string,
      batchMoveOptions: BatchMoveOptions,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BatchMoveResult>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.batchMoveCategory(
        teamName,
        batchMoveOptions,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CategoryApiFp(configuration);
  return {
    /**
     * 指定されたカテゴリを配下のカテゴリを含めて一括で変更します。
     * @summary カテゴリを一括移動する
     * @param {string} teamName チーム名
     * @param {BatchMoveOptions} batchMoveOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchMoveCategory(
      teamName: string,
      batchMoveOptions: BatchMoveOptions,
      options?: any
    ): AxiosPromise<BatchMoveResult> {
      return localVarFp
        .batchMoveCategory(teamName, batchMoveOptions, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for batchMoveCategory operation in CategoryApi.
 * @export
 * @interface CategoryApiBatchMoveCategoryRequest
 */
export interface CategoryApiBatchMoveCategoryRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof CategoryApiBatchMoveCategory
   */
  readonly teamName: string;

  /**
   *
   * @type {BatchMoveOptions}
   * @memberof CategoryApiBatchMoveCategory
   */
  readonly batchMoveOptions: BatchMoveOptions;
}

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
  /**
   * 指定されたカテゴリを配下のカテゴリを含めて一括で変更します。
   * @summary カテゴリを一括移動する
   * @param {CategoryApiBatchMoveCategoryRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApi
   */
  public batchMoveCategory(
    requestParameters: CategoryApiBatchMoveCategoryRequest,
    options?: any
  ) {
    return CategoryApiFp(this.configuration)
      .batchMoveCategory(
        requestParameters.teamName,
        requestParameters.batchMoveOptions,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
