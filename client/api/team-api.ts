/* tslint:disable */
/* eslint-disable */
/**
 * esa API v1
 * チームのナレッジ共有サービス[esa.io](https://esa.io/)のAPI v1の仕様書
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { PaginatedTeams } from "../models";
// @ts-ignore
import { Team } from "../models";
// @ts-ignore
import { TeamStats } from "../models";
/**
 * TeamApi - axios parameter creator
 * @export
 */
export const TeamApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary 所属するチームを取得する
     * @param {string} teamName チーム名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeam: async (
      teamName: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("getTeam", "teamName", teamName);
      const localVarPath = `/teams/{team_name}`.replace(
        `{${"team_name"}}`,
        encodeURIComponent(String(teamName)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration,
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary チームの統計情報を取得する
     * @param {string} teamName チーム名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeamStats: async (
      teamName: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("getTeamStats", "teamName", teamName);
      const localVarPath = `/teams/{team_name}/stats`.replace(
        `{${"team_name"}}`,
        encodeURIComponent(String(teamName)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration,
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 所属するチーム一覧を取得する
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeams: async (
      page?: number,
      perPage?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/teams`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration,
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration,
      );

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TeamApi - functional programming interface
 * @export
 */
export const TeamApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TeamApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 所属するチームを取得する
     * @param {string} teamName チーム名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTeam(
      teamName: string,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTeam(
        teamName,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary チームの統計情報を取得する
     * @param {string} teamName チーム名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTeamStats(
      teamName: string,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamStats>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamStats(
        teamName,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary 所属するチーム一覧を取得する
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTeams(
      page?: number,
      perPage?: number,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedTeams>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTeams(
        page,
        perPage,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * TeamApi - factory interface
 * @export
 */
export const TeamApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TeamApiFp(configuration);
  return {
    /**
     *
     * @summary 所属するチームを取得する
     * @param {string} teamName チーム名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeam(teamName: string, options?: any): AxiosPromise<Team> {
      return localVarFp
        .getTeam(teamName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary チームの統計情報を取得する
     * @param {string} teamName チーム名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeamStats(teamName: string, options?: any): AxiosPromise<TeamStats> {
      return localVarFp
        .getTeamStats(teamName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 所属するチーム一覧を取得する
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeams(
      page?: number,
      perPage?: number,
      options?: any,
    ): AxiosPromise<PaginatedTeams> {
      return localVarFp
        .getTeams(page, perPage, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for getTeam operation in TeamApi.
 * @export
 * @interface TeamApiGetTeamRequest
 */
export interface TeamApiGetTeamRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof TeamApiGetTeam
   */
  readonly teamName: string;
}

/**
 * Request parameters for getTeamStats operation in TeamApi.
 * @export
 * @interface TeamApiGetTeamStatsRequest
 */
export interface TeamApiGetTeamStatsRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof TeamApiGetTeamStats
   */
  readonly teamName: string;
}

/**
 * Request parameters for getTeams operation in TeamApi.
 * @export
 * @interface TeamApiGetTeamsRequest
 */
export interface TeamApiGetTeamsRequest {
  /**
   * ページ番号
   * @type {number}
   * @memberof TeamApiGetTeams
   */
  readonly page?: number;

  /**
   * 1ページあたりに含まれる要素数
   * @type {number}
   * @memberof TeamApiGetTeams
   */
  readonly perPage?: number;
}

/**
 * TeamApi - object-oriented interface
 * @export
 * @class TeamApi
 * @extends {BaseAPI}
 */
export class TeamApi extends BaseAPI {
  /**
   *
   * @summary 所属するチームを取得する
   * @param {TeamApiGetTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public getTeam(requestParameters: TeamApiGetTeamRequest, options?: any) {
    return TeamApiFp(this.configuration)
      .getTeam(requestParameters.teamName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary チームの統計情報を取得する
   * @param {TeamApiGetTeamStatsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public getTeamStats(
    requestParameters: TeamApiGetTeamStatsRequest,
    options?: any,
  ) {
    return TeamApiFp(this.configuration)
      .getTeamStats(requestParameters.teamName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 所属するチーム一覧を取得する
   * @param {TeamApiGetTeamsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public getTeams(
    requestParameters: TeamApiGetTeamsRequest = {},
    options?: any,
  ) {
    return TeamApiFp(this.configuration)
      .getTeams(requestParameters.page, requestParameters.perPage, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
