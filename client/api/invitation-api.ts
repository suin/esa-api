/* tslint:disable */
/* eslint-disable */
/**
 * esa API v1
 * チームのナレッジ共有サービス[esa.io](https://esa.io/)のAPI v1の仕様書
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { InvitationList } from "../models";
// @ts-ignore
import { InviteBody } from "../models";
/**
 * InvitationApi - axios parameter creator
 * @export
 */
export const InvitationApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 招待中のメンバーの招待を削除します。招待時に送信されたメールに記載された招待用のURLは無効となります。 このAPIは**team**の**owner**だけがご利用可能です。
     * @summary 招待を取り下げる
     * @param {string} teamName チーム名
     * @param {string} code 招待時の識別子を指定します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disinvite: async (
      teamName: string,
      code: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("disinvite", "teamName", teamName);
      // verify required parameter 'code' is not null or undefined
      assertParamExists("disinvite", "code", code);
      const localVarPath = `/teams/{team_name}/invitations/{code}`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"code"}}`, encodeURIComponent(String(code)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 招待中のメンバーの一覧を取得します。  このAPIは**team**の**owner**だけがご利用可能です。
     * @summary 招待中のメンバー一覧を取得する
     * @param {string} teamName チーム名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvitations: async (
      teamName: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("getInvitations", "teamName", teamName);
      const localVarPath = `/teams/{team_name}/invitations`.replace(
        `{${"team_name"}}`,
        encodeURIComponent(String(teamName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 招待したいメンバーへ個別の招待URLを発行し、指定したEメールアドレスへ送信します。  このAPIは**team**の**owner**だけがご利用可能です。
     * @summary Emailで招待する
     * @param {string} teamName チーム名
     * @param {InviteBody} inviteBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invite: async (
      teamName: string,
      inviteBody: InviteBody,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("invite", "teamName", teamName);
      // verify required parameter 'inviteBody' is not null or undefined
      assertParamExists("invite", "inviteBody", inviteBody);
      const localVarPath = `/teams/{team_name}/invitations`.replace(
        `{${"team_name"}}`,
        encodeURIComponent(String(teamName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        inviteBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * InvitationApi - functional programming interface
 * @export
 */
export const InvitationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = InvitationApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     * 招待中のメンバーの招待を削除します。招待時に送信されたメールに記載された招待用のURLは無効となります。 このAPIは**team**の**owner**だけがご利用可能です。
     * @summary 招待を取り下げる
     * @param {string} teamName チーム名
     * @param {string} code 招待時の識別子を指定します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async disinvite(
      teamName: string,
      code: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.disinvite(
        teamName,
        code,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 招待中のメンバーの一覧を取得します。  このAPIは**team**の**owner**だけがご利用可能です。
     * @summary 招待中のメンバー一覧を取得する
     * @param {string} teamName チーム名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInvitations(
      teamName: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitationList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getInvitations(
        teamName,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 招待したいメンバーへ個別の招待URLを発行し、指定したEメールアドレスへ送信します。  このAPIは**team**の**owner**だけがご利用可能です。
     * @summary Emailで招待する
     * @param {string} teamName チーム名
     * @param {InviteBody} inviteBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async invite(
      teamName: string,
      inviteBody: InviteBody,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitationList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.invite(
        teamName,
        inviteBody,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * InvitationApi - factory interface
 * @export
 */
export const InvitationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = InvitationApiFp(configuration);
  return {
    /**
     * 招待中のメンバーの招待を削除します。招待時に送信されたメールに記載された招待用のURLは無効となります。 このAPIは**team**の**owner**だけがご利用可能です。
     * @summary 招待を取り下げる
     * @param {string} teamName チーム名
     * @param {string} code 招待時の識別子を指定します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disinvite(
      teamName: string,
      code: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .disinvite(teamName, code, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 招待中のメンバーの一覧を取得します。  このAPIは**team**の**owner**だけがご利用可能です。
     * @summary 招待中のメンバー一覧を取得する
     * @param {string} teamName チーム名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvitations(
      teamName: string,
      options?: any
    ): AxiosPromise<InvitationList> {
      return localVarFp
        .getInvitations(teamName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 招待したいメンバーへ個別の招待URLを発行し、指定したEメールアドレスへ送信します。  このAPIは**team**の**owner**だけがご利用可能です。
     * @summary Emailで招待する
     * @param {string} teamName チーム名
     * @param {InviteBody} inviteBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invite(
      teamName: string,
      inviteBody: InviteBody,
      options?: any
    ): AxiosPromise<InvitationList> {
      return localVarFp
        .invite(teamName, inviteBody, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for disinvite operation in InvitationApi.
 * @export
 * @interface InvitationApiDisinviteRequest
 */
export interface InvitationApiDisinviteRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof InvitationApiDisinvite
   */
  readonly teamName: string;

  /**
   * 招待時の識別子を指定します
   * @type {string}
   * @memberof InvitationApiDisinvite
   */
  readonly code: string;
}

/**
 * Request parameters for getInvitations operation in InvitationApi.
 * @export
 * @interface InvitationApiGetInvitationsRequest
 */
export interface InvitationApiGetInvitationsRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof InvitationApiGetInvitations
   */
  readonly teamName: string;
}

/**
 * Request parameters for invite operation in InvitationApi.
 * @export
 * @interface InvitationApiInviteRequest
 */
export interface InvitationApiInviteRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof InvitationApiInvite
   */
  readonly teamName: string;

  /**
   *
   * @type {InviteBody}
   * @memberof InvitationApiInvite
   */
  readonly inviteBody: InviteBody;
}

/**
 * InvitationApi - object-oriented interface
 * @export
 * @class InvitationApi
 * @extends {BaseAPI}
 */
export class InvitationApi extends BaseAPI {
  /**
   * 招待中のメンバーの招待を削除します。招待時に送信されたメールに記載された招待用のURLは無効となります。 このAPIは**team**の**owner**だけがご利用可能です。
   * @summary 招待を取り下げる
   * @param {InvitationApiDisinviteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InvitationApi
   */
  public disinvite(
    requestParameters: InvitationApiDisinviteRequest,
    options?: any
  ) {
    return InvitationApiFp(this.configuration)
      .disinvite(requestParameters.teamName, requestParameters.code, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 招待中のメンバーの一覧を取得します。  このAPIは**team**の**owner**だけがご利用可能です。
   * @summary 招待中のメンバー一覧を取得する
   * @param {InvitationApiGetInvitationsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InvitationApi
   */
  public getInvitations(
    requestParameters: InvitationApiGetInvitationsRequest,
    options?: any
  ) {
    return InvitationApiFp(this.configuration)
      .getInvitations(requestParameters.teamName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 招待したいメンバーへ個別の招待URLを発行し、指定したEメールアドレスへ送信します。  このAPIは**team**の**owner**だけがご利用可能です。
   * @summary Emailで招待する
   * @param {InvitationApiInviteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InvitationApi
   */
  public invite(requestParameters: InvitationApiInviteRequest, options?: any) {
    return InvitationApiFp(this.configuration)
      .invite(requestParameters.teamName, requestParameters.inviteBody, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
