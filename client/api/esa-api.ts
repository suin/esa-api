/* tslint:disable */
/* eslint-disable */
/**
 * esa API v1
 * チームのナレッジ共有サービス[esa.io](https://esa.io/)のAPI v1の仕様書
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { AuthenticatedUser } from "../models";
// @ts-ignore
import { BatchMoveOptions } from "../models";
// @ts-ignore
import { BatchMoveResult } from "../models";
// @ts-ignore
import { Comment } from "../models";
// @ts-ignore
import { CreateCommentBody } from "../models";
// @ts-ignore
import { CreateEmojiBody } from "../models";
// @ts-ignore
import { CreatePostBody } from "../models";
// @ts-ignore
import { CreatedEmoji } from "../models";
// @ts-ignore
import { EmojiList } from "../models";
// @ts-ignore
import { InvitationList } from "../models";
// @ts-ignore
import { InviteBody } from "../models";
// @ts-ignore
import { NewStar } from "../models";
// @ts-ignore
import { PaginatedComments } from "../models";
// @ts-ignore
import { PaginatedMembers } from "../models";
// @ts-ignore
import { PaginatedPosts } from "../models";
// @ts-ignore
import { PaginatedStargazers } from "../models";
// @ts-ignore
import { PaginatedTeams } from "../models";
// @ts-ignore
import { PaginatedWatchers } from "../models";
// @ts-ignore
import { Post } from "../models";
// @ts-ignore
import { Team } from "../models";
// @ts-ignore
import { TeamStats } from "../models";
// @ts-ignore
import { UpdateCommentBody } from "../models";
// @ts-ignore
import { UpdatePostBody } from "../models";
/**
 * EsaApi - axios parameter creator
 * @export
 */
export const EsaApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 指定されたカテゴリを配下のカテゴリを含めて一括で変更します。
     * @summary カテゴリを一括移動する
     * @param {string} teamName チーム名
     * @param {BatchMoveOptions} batchMoveOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchMoveCategory: async (
      teamName: string,
      batchMoveOptions: BatchMoveOptions,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("batchMoveCategory", "teamName", teamName);
      // verify required parameter 'batchMoveOptions' is not null or undefined
      assertParamExists(
        "batchMoveCategory",
        "batchMoveOptions",
        batchMoveOptions
      );
      const localVarPath = `/teams/{team_name}/categories/batch_move`.replace(
        `{${"team_name"}}`,
        encodeURIComponent(String(teamName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        batchMoveOptions,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 記事に新しいコメントを作成します。
     * @summary コメントを投稿する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {CreateCommentBody} createCommentBody
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createComment: async (
      teamName: string,
      postNumber: number,
      createCommentBody: CreateCommentBody,
      page?: number,
      perPage?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("createComment", "teamName", teamName);
      // verify required parameter 'postNumber' is not null or undefined
      assertParamExists("createComment", "postNumber", postNumber);
      // verify required parameter 'createCommentBody' is not null or undefined
      assertParamExists(
        "createComment",
        "createCommentBody",
        createCommentBody
      );
      const localVarPath = `/teams/{team_name}/posts/{post_number}/comments`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"post_number"}}`, encodeURIComponent(String(postNumber)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCommentBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 新しい絵文字を登録します。
     * @summary 絵文字を登録する
     * @param {string} teamName チーム名
     * @param {CreateEmojiBody} createEmojiBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmoji: async (
      teamName: string,
      createEmojiBody: CreateEmojiBody,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("createEmoji", "teamName", teamName);
      // verify required parameter 'createEmojiBody' is not null or undefined
      assertParamExists("createEmoji", "createEmojiBody", createEmojiBody);
      const localVarPath = `/teams/{team_name}/emojis`.replace(
        `{${"team_name"}}`,
        encodeURIComponent(String(teamName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createEmojiBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 記事を投稿する
     * @param {string} teamName チーム名
     * @param {CreatePostBody} createPostBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPost: async (
      teamName: string,
      createPostBody: CreatePostBody,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("createPost", "teamName", teamName);
      // verify required parameter 'createPostBody' is not null or undefined
      assertParamExists("createPost", "createPostBody", createPostBody);
      const localVarPath = `/teams/{team_name}/posts`.replace(
        `{${"team_name"}}`,
        encodeURIComponent(String(teamName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createPostBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定されたコメントを削除します。
     * @summary コメントを削除する
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteComment: async (
      teamName: string,
      commentId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("deleteComment", "teamName", teamName);
      // verify required parameter 'commentId' is not null or undefined
      assertParamExists("deleteComment", "commentId", commentId);
      const localVarPath = `/teams/{team_name}/comments/{comment_id}`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 登録したチーム固有の絵文字を削除します。
     * @summary 絵文字を削除する
     * @param {string} teamName チーム名
     * @param {string} code 絵文字コード
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEmoji: async (
      teamName: string,
      code: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("deleteEmoji", "teamName", teamName);
      // verify required parameter 'code' is not null or undefined
      assertParamExists("deleteEmoji", "code", code);
      const localVarPath = `/teams/{team_name}/emojis/{code}`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"code"}}`, encodeURIComponent(String(code)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定した screen_name のメンバーをチームから削除します。  - チームの owner である必要があります - APIで自分自身をチームから削除することはできません。
     * @summary メンバーを削除する
     * @param {string} teamName チーム名
     * @param {string} screenName 削除するメンバーのscreen_name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMember: async (
      teamName: string,
      screenName: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("deleteMember", "teamName", teamName);
      // verify required parameter 'screenName' is not null or undefined
      assertParamExists("deleteMember", "screenName", screenName);
      const localVarPath = `/teams/{team_name}/members/{screen_name}`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"screen_name"}}`, encodeURIComponent(String(screenName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定された記事を削除します。
     * @summary 記事を削除する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePost: async (
      teamName: string,
      postNumber: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("deletePost", "teamName", teamName);
      // verify required parameter 'postNumber' is not null or undefined
      assertParamExists("deletePost", "postNumber", postNumber);
      const localVarPath = `/teams/{team_name}/posts/{post_number}`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"post_number"}}`, encodeURIComponent(String(postNumber)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 招待中のメンバーの招待を削除します。招待時に送信されたメールに記載された招待用のURLは無効となります。 このAPIは**team**の**owner**だけがご利用可能です。
     * @summary 招待を取り下げる
     * @param {string} teamName チーム名
     * @param {string} code 招待時の識別子を指定します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disinvite: async (
      teamName: string,
      code: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("disinvite", "teamName", teamName);
      // verify required parameter 'code' is not null or undefined
      assertParamExists("disinvite", "code", code);
      const localVarPath = `/teams/{team_name}/invitations/{code}`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"code"}}`, encodeURIComponent(String(code)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 現在のアクセストークンで認証中のユーザーの情報を取得します。
     * @summary 認証中のユーザーを取得する
     * @param {'teams'} [include] teams を指定すると所属するチームの配列を含んだレスポンスを返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatedUser: async (
      include?: "teams",
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration
      );

      if (include !== undefined) {
        localVarQueryParameter["include"] = include;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定されたコメントを取得します。
     * @summary コメントを取得する
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {'stargazers'} [include] &#x60;stargazers&#x60;を指定するとStarの配列を含んだレスポンスを返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComment: async (
      teamName: string,
      commentId: number,
      include?: "stargazers",
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("getComment", "teamName", teamName);
      // verify required parameter 'commentId' is not null or undefined
      assertParamExists("getComment", "commentId", commentId);
      const localVarPath = `/teams/{team_name}/comments/{comment_id}`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration
      );

      if (include !== undefined) {
        localVarQueryParameter["include"] = include;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定されたコメントにStarをしたユーザ一覧を取得します。
     * @summary コメントのStarを取得する
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommentStargazers: async (
      teamName: string,
      commentId: number,
      page?: number,
      perPage?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("getCommentStargazers", "teamName", teamName);
      // verify required parameter 'commentId' is not null or undefined
      assertParamExists("getCommentStargazers", "commentId", commentId);
      const localVarPath = `/teams/{team_name}/comments/{comment_id}/stargazers`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration
      );

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * チーム全体のコメント一覧を作成日の降順で返却します。
     * @summary コメント一覧を取得する
     * @param {string} teamName チーム名
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComments: async (
      teamName: string,
      page?: number,
      perPage?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("getComments", "teamName", teamName);
      const localVarPath = `/teams/{team_name}/comments`.replace(
        `{${"team_name"}}`,
        encodeURIComponent(String(teamName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration
      );

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * チームで利用可能な絵文字を取得します。URIクエリ文字列を含めない場合、チーム固有の絵文字だけを取得します。
     * @summary 絵文字一覧を取得する
     * @param {string} teamName チーム名
     * @param {'all'} [include] &#x60;all&#x60;を指定すると、チーム固有の絵文字だけではなく、すべての絵文字を返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmojis: async (
      teamName: string,
      include?: "all",
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("getEmojis", "teamName", teamName);
      const localVarPath = `/teams/{team_name}/emojis`.replace(
        `{${"team_name"}}`,
        encodeURIComponent(String(teamName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration
      );

      if (include !== undefined) {
        localVarQueryParameter["include"] = include;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 招待中のメンバーの一覧を取得します。  このAPIは**team**の**owner**だけがご利用可能です。
     * @summary 招待中のメンバー一覧を取得する
     * @param {string} teamName チーム名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvitations: async (
      teamName: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("getInvitations", "teamName", teamName);
      const localVarPath = `/teams/{team_name}/invitations`.replace(
        `{${"team_name"}}`,
        encodeURIComponent(String(teamName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary メンバーを取得する
     * @param {string} teamName チーム名
     * @param {'posts_count' | 'joined' | 'last_accessed'} [sort]
     * @param {'asc' | 'desc'} [order] 設定可能な値:  - &#x60;desc&#x60;: 降順 (default) - &#x60;asc&#x60;: 昇順
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMembers: async (
      teamName: string,
      sort?: "posts_count" | "joined" | "last_accessed",
      order?: "asc" | "desc",
      page?: number,
      perPage?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("getMembers", "teamName", teamName);
      const localVarPath = `/teams/{team_name}/members`.replace(
        `{${"team_name"}}`,
        encodeURIComponent(String(teamName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration
      );

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定された記事を取得します。
     * @summary 記事を取得する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {Array<'comments' | 'comments.stargazers' | 'stargazers'>} [include] - &#x60;comments&#x60; を指定するとコメントの配列を含んだレスポンスを返します。 - &#x60;comments,comments.stargazers&#x60;を指定するとコメントとコメントに対するStarの配列を含んだレスポンスを返します。 - &#x60;stargazers&#x60; を指定するとStarの配列を含んだレスポンスを返します。 - &#x60;stargazers,comments&#x60; のように &#x60;,&#x60; で区切ることで複数指定できます
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPost: async (
      teamName: string,
      postNumber: number,
      include?: Array<"comments" | "comments.stargazers" | "stargazers">,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("getPost", "teamName", teamName);
      // verify required parameter 'postNumber' is not null or undefined
      assertParamExists("getPost", "postNumber", postNumber);
      const localVarPath = `/teams/{team_name}/posts/{post_number}`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"post_number"}}`, encodeURIComponent(String(postNumber)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration
      );

      if (include) {
        localVarQueryParameter["include"] = include.join(
          COLLECTION_FORMATS.csv
        );
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 記事のコメント一覧を更新日の降順で返却します。
     * @summary 記事のコメント一覧を取得する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostComments: async (
      teamName: string,
      postNumber: number,
      page?: number,
      perPage?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("getPostComments", "teamName", teamName);
      // verify required parameter 'postNumber' is not null or undefined
      assertParamExists("getPostComments", "postNumber", postNumber);
      const localVarPath = `/teams/{team_name}/posts/{post_number}/comments`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"post_number"}}`, encodeURIComponent(String(postNumber)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration
      );

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定された記事にStarをしたユーザ一覧を取得します。
     * @summary 記事のStarを取得する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostStargazers: async (
      teamName: string,
      postNumber: number,
      page?: number,
      perPage?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("getPostStargazers", "teamName", teamName);
      // verify required parameter 'postNumber' is not null or undefined
      assertParamExists("getPostStargazers", "postNumber", postNumber);
      const localVarPath = `/teams/{team_name}/posts/{post_number}/stargazers`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"post_number"}}`, encodeURIComponent(String(postNumber)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration
      );

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 記事一覧を取得する
     * @param {string} teamName チーム名
     * @param {string} [q] 記事を絞り込むための条件を指定します
     * @param {Array<'comments' | 'comments.stargazers' | 'stargazers'>} [include] - &#x60;comments&#x60; を指定するとコメントの配列を含んだレスポンスを返します。 - &#x60;comments,comments.stargazers&#x60;を指定するとコメントとコメントに対するStarの配列を含んだレスポンスを返します。 - &#x60;stargazers&#x60; を指定するとStarの配列を含んだレスポンスを返します。 - &#x60;stargazers,comments&#x60; のように &#x60;,&#x60; で区切ることで複数指定できます
     * @param {'updated' | 'created' | 'number' | 'stars' | 'watches' | 'comments' | 'best_match'} [sort] 記事の並び順を指定します  - 設定可能な値   - &#x60;updated&#x60; (default)       - 記事の更新日時   - &#x60;created&#x60;       - 記事の作成日時   - &#x60;number&#x60;       - 記事番号   - &#x60;stars&#x60;       - 記事へのStarの数   - &#x60;watches&#x60;       - 記事へのWatchの数   - &#x60;comments&#x60;       - 記事へのCommentの数   - &#x60;best_match&#x60;       - 総合的な記事のスコア
     * @param {'asc' | 'desc'} [order] 設定可能な値:  - &#x60;desc&#x60;: 降順 (default) - &#x60;asc&#x60;: 昇順
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPosts: async (
      teamName: string,
      q?: string,
      include?: Array<"comments" | "comments.stargazers" | "stargazers">,
      sort?:
        | "updated"
        | "created"
        | "number"
        | "stars"
        | "watches"
        | "comments"
        | "best_match",
      order?: "asc" | "desc",
      page?: number,
      perPage?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("getPosts", "teamName", teamName);
      const localVarPath = `/teams/{team_name}/posts`.replace(
        `{${"team_name"}}`,
        encodeURIComponent(String(teamName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration
      );

      if (q !== undefined) {
        localVarQueryParameter["q"] = q;
      }

      if (include) {
        localVarQueryParameter["include"] = include.join(
          COLLECTION_FORMATS.csv
        );
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 所属するチームを取得する
     * @param {string} teamName チーム名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeam: async (
      teamName: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("getTeam", "teamName", teamName);
      const localVarPath = `/teams/{team_name}`.replace(
        `{${"team_name"}}`,
        encodeURIComponent(String(teamName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary チームの統計情報を取得する
     * @param {string} teamName チーム名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeamStats: async (
      teamName: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("getTeamStats", "teamName", teamName);
      const localVarPath = `/teams/{team_name}/stats`.replace(
        `{${"team_name"}}`,
        encodeURIComponent(String(teamName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 所属するチーム一覧を取得する
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeams: async (
      page?: number,
      perPage?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/teams`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration
      );

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定された記事にWatchをしたユーザ一覧を取得します。
     * @summary Watchしたユーザー一覧を取得する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWatchers: async (
      teamName: string,
      postNumber: number,
      page?: number,
      perPage?: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("getWatchers", "teamName", teamName);
      // verify required parameter 'postNumber' is not null or undefined
      assertParamExists("getWatchers", "postNumber", postNumber);
      const localVarPath = `/teams/{team_name}/posts/{post_number}/watchers`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"post_number"}}`, encodeURIComponent(String(postNumber)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["read"],
        configuration
      );

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 招待したいメンバーへ個別の招待URLを発行し、指定したEメールアドレスへ送信します。  このAPIは**team**の**owner**だけがご利用可能です。
     * @summary Emailで招待する
     * @param {string} teamName チーム名
     * @param {InviteBody} inviteBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invite: async (
      teamName: string,
      inviteBody: InviteBody,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("invite", "teamName", teamName);
      // verify required parameter 'inviteBody' is not null or undefined
      assertParamExists("invite", "inviteBody", inviteBody);
      const localVarPath = `/teams/{team_name}/invitations`.replace(
        `{${"team_name"}}`,
        encodeURIComponent(String(teamName))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        inviteBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定されたコメントにStarをします。
     * @summary コメントをStarする
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {NewStar} newStar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    starComment: async (
      teamName: string,
      commentId: number,
      newStar: NewStar,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("starComment", "teamName", teamName);
      // verify required parameter 'commentId' is not null or undefined
      assertParamExists("starComment", "commentId", commentId);
      // verify required parameter 'newStar' is not null or undefined
      assertParamExists("starComment", "newStar", newStar);
      const localVarPath = `/teams/{team_name}/comments/{comment_id}/star`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        newStar,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定された記事にStarをします。
     * @summary 記事をStarする
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {NewStar} newStar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    starPost: async (
      teamName: string,
      postNumber: number,
      newStar: NewStar,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("starPost", "teamName", teamName);
      // verify required parameter 'postNumber' is not null or undefined
      assertParamExists("starPost", "postNumber", postNumber);
      // verify required parameter 'newStar' is not null or undefined
      assertParamExists("starPost", "newStar", newStar);
      const localVarPath = `/teams/{team_name}/posts/{post_number}/star`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"post_number"}}`, encodeURIComponent(String(postNumber)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        newStar,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定されたコメントへのStarを取り消します。
     * @summary コメントのStarを取り消す
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unstarComment: async (
      teamName: string,
      commentId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("unstarComment", "teamName", teamName);
      // verify required parameter 'commentId' is not null or undefined
      assertParamExists("unstarComment", "commentId", commentId);
      const localVarPath = `/teams/{team_name}/comments/{comment_id}/star`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定された記事へのStarを取り消します。
     * @summary 記事のStarを取り消す
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unstarPost: async (
      teamName: string,
      postNumber: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("unstarPost", "teamName", teamName);
      // verify required parameter 'postNumber' is not null or undefined
      assertParamExists("unstarPost", "postNumber", postNumber);
      const localVarPath = `/teams/{team_name}/posts/{post_number}/star`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"post_number"}}`, encodeURIComponent(String(postNumber)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定された記事へのWatchを取り消します。
     * @summary 記事のWatchを取り消す
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unwachPost: async (
      teamName: string,
      postNumber: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("unwachPost", "teamName", teamName);
      // verify required parameter 'postNumber' is not null or undefined
      assertParamExists("unwachPost", "postNumber", postNumber);
      const localVarPath = `/teams/{team_name}/posts/{post_number}/watch`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"post_number"}}`, encodeURIComponent(String(postNumber)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定されたコメントを更新します。
     * @summary コメントを更新する
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {UpdateCommentBody} updateCommentBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateComment: async (
      teamName: string,
      commentId: number,
      updateCommentBody: UpdateCommentBody,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("updateComment", "teamName", teamName);
      // verify required parameter 'commentId' is not null or undefined
      assertParamExists("updateComment", "commentId", commentId);
      // verify required parameter 'updateCommentBody' is not null or undefined
      assertParamExists(
        "updateComment",
        "updateCommentBody",
        updateCommentBody
      );
      const localVarPath = `/teams/{team_name}/comments/{comment_id}`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCommentBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定された記事を編集します。
     * @summary 記事を編集する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {UpdatePostBody} updatePostBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePost: async (
      teamName: string,
      postNumber: number,
      updatePostBody: UpdatePostBody,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("updatePost", "teamName", teamName);
      // verify required parameter 'postNumber' is not null or undefined
      assertParamExists("updatePost", "postNumber", postNumber);
      // verify required parameter 'updatePostBody' is not null or undefined
      assertParamExists("updatePost", "updatePostBody", updatePostBody);
      const localVarPath = `/teams/{team_name}/posts/{post_number}`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"post_number"}}`, encodeURIComponent(String(postNumber)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePostBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定された記事にWatchをします。
     * @summary 記事をWatchする
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    watchPost: async (
      teamName: string,
      postNumber: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamName' is not null or undefined
      assertParamExists("watchPost", "teamName", teamName);
      // verify required parameter 'postNumber' is not null or undefined
      assertParamExists("watchPost", "postNumber", postNumber);
      const localVarPath = `/teams/{team_name}/posts/{post_number}/watch`
        .replace(`{${"team_name"}}`, encodeURIComponent(String(teamName)))
        .replace(`{${"post_number"}}`, encodeURIComponent(String(postNumber)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication AccessTokenHeader required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // authentication AccessTokenQueryParam required
      await setApiKeyToObject(
        localVarQueryParameter,
        "access_token",
        configuration
      );

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        ["write"],
        configuration
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * EsaApi - functional programming interface
 * @export
 */
export const EsaApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = EsaApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定されたカテゴリを配下のカテゴリを含めて一括で変更します。
     * @summary カテゴリを一括移動する
     * @param {string} teamName チーム名
     * @param {BatchMoveOptions} batchMoveOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async batchMoveCategory(
      teamName: string,
      batchMoveOptions: BatchMoveOptions,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BatchMoveResult>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.batchMoveCategory(
        teamName,
        batchMoveOptions,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 記事に新しいコメントを作成します。
     * @summary コメントを投稿する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {CreateCommentBody} createCommentBody
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createComment(
      teamName: string,
      postNumber: number,
      createCommentBody: CreateCommentBody,
      page?: number,
      perPage?: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createComment(
        teamName,
        postNumber,
        createCommentBody,
        page,
        perPage,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 新しい絵文字を登録します。
     * @summary 絵文字を登録する
     * @param {string} teamName チーム名
     * @param {CreateEmojiBody} createEmojiBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createEmoji(
      teamName: string,
      createEmojiBody: CreateEmojiBody,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedEmoji>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createEmoji(
        teamName,
        createEmojiBody,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary 記事を投稿する
     * @param {string} teamName チーム名
     * @param {CreatePostBody} createPostBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPost(
      teamName: string,
      createPostBody: CreatePostBody,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPost(
        teamName,
        createPostBody,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定されたコメントを削除します。
     * @summary コメントを削除する
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteComment(
      teamName: string,
      commentId: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteComment(
        teamName,
        commentId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 登録したチーム固有の絵文字を削除します。
     * @summary 絵文字を削除する
     * @param {string} teamName チーム名
     * @param {string} code 絵文字コード
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteEmoji(
      teamName: string,
      code: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEmoji(
        teamName,
        code,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定した screen_name のメンバーをチームから削除します。  - チームの owner である必要があります - APIで自分自身をチームから削除することはできません。
     * @summary メンバーを削除する
     * @param {string} teamName チーム名
     * @param {string} screenName 削除するメンバーのscreen_name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMember(
      teamName: string,
      screenName: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMember(
        teamName,
        screenName,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定された記事を削除します。
     * @summary 記事を削除する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePost(
      teamName: string,
      postNumber: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePost(
        teamName,
        postNumber,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 招待中のメンバーの招待を削除します。招待時に送信されたメールに記載された招待用のURLは無効となります。 このAPIは**team**の**owner**だけがご利用可能です。
     * @summary 招待を取り下げる
     * @param {string} teamName チーム名
     * @param {string} code 招待時の識別子を指定します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async disinvite(
      teamName: string,
      code: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.disinvite(
        teamName,
        code,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 現在のアクセストークンで認証中のユーザーの情報を取得します。
     * @summary 認証中のユーザーを取得する
     * @param {'teams'} [include] teams を指定すると所属するチームの配列を含んだレスポンスを返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAuthenticatedUser(
      include?: "teams",
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AuthenticatedUser>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatedUser(
        include,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定されたコメントを取得します。
     * @summary コメントを取得する
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {'stargazers'} [include] &#x60;stargazers&#x60;を指定するとStarの配列を含んだレスポンスを返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getComment(
      teamName: string,
      commentId: number,
      include?: "stargazers",
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getComment(
        teamName,
        commentId,
        include,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定されたコメントにStarをしたユーザ一覧を取得します。
     * @summary コメントのStarを取得する
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCommentStargazers(
      teamName: string,
      commentId: number,
      page?: number,
      perPage?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedStargazers>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCommentStargazers(
        teamName,
        commentId,
        page,
        perPage,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * チーム全体のコメント一覧を作成日の降順で返却します。
     * @summary コメント一覧を取得する
     * @param {string} teamName チーム名
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getComments(
      teamName: string,
      page?: number,
      perPage?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedComments>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getComments(
        teamName,
        page,
        perPage,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * チームで利用可能な絵文字を取得します。URIクエリ文字列を含めない場合、チーム固有の絵文字だけを取得します。
     * @summary 絵文字一覧を取得する
     * @param {string} teamName チーム名
     * @param {'all'} [include] &#x60;all&#x60;を指定すると、チーム固有の絵文字だけではなく、すべての絵文字を返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEmojis(
      teamName: string,
      include?: "all",
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmojiList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEmojis(
        teamName,
        include,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 招待中のメンバーの一覧を取得します。  このAPIは**team**の**owner**だけがご利用可能です。
     * @summary 招待中のメンバー一覧を取得する
     * @param {string} teamName チーム名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInvitations(
      teamName: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitationList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getInvitations(
        teamName,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary メンバーを取得する
     * @param {string} teamName チーム名
     * @param {'posts_count' | 'joined' | 'last_accessed'} [sort]
     * @param {'asc' | 'desc'} [order] 設定可能な値:  - &#x60;desc&#x60;: 降順 (default) - &#x60;asc&#x60;: 昇順
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMembers(
      teamName: string,
      sort?: "posts_count" | "joined" | "last_accessed",
      order?: "asc" | "desc",
      page?: number,
      perPage?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedMembers>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMembers(
        teamName,
        sort,
        order,
        page,
        perPage,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定された記事を取得します。
     * @summary 記事を取得する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {Array<'comments' | 'comments.stargazers' | 'stargazers'>} [include] - &#x60;comments&#x60; を指定するとコメントの配列を含んだレスポンスを返します。 - &#x60;comments,comments.stargazers&#x60;を指定するとコメントとコメントに対するStarの配列を含んだレスポンスを返します。 - &#x60;stargazers&#x60; を指定するとStarの配列を含んだレスポンスを返します。 - &#x60;stargazers,comments&#x60; のように &#x60;,&#x60; で区切ることで複数指定できます
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPost(
      teamName: string,
      postNumber: number,
      include?: Array<"comments" | "comments.stargazers" | "stargazers">,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPost(
        teamName,
        postNumber,
        include,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 記事のコメント一覧を更新日の降順で返却します。
     * @summary 記事のコメント一覧を取得する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPostComments(
      teamName: string,
      postNumber: number,
      page?: number,
      perPage?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedComments>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPostComments(
        teamName,
        postNumber,
        page,
        perPage,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定された記事にStarをしたユーザ一覧を取得します。
     * @summary 記事のStarを取得する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPostStargazers(
      teamName: string,
      postNumber: number,
      page?: number,
      perPage?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedStargazers>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPostStargazers(
        teamName,
        postNumber,
        page,
        perPage,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary 記事一覧を取得する
     * @param {string} teamName チーム名
     * @param {string} [q] 記事を絞り込むための条件を指定します
     * @param {Array<'comments' | 'comments.stargazers' | 'stargazers'>} [include] - &#x60;comments&#x60; を指定するとコメントの配列を含んだレスポンスを返します。 - &#x60;comments,comments.stargazers&#x60;を指定するとコメントとコメントに対するStarの配列を含んだレスポンスを返します。 - &#x60;stargazers&#x60; を指定するとStarの配列を含んだレスポンスを返します。 - &#x60;stargazers,comments&#x60; のように &#x60;,&#x60; で区切ることで複数指定できます
     * @param {'updated' | 'created' | 'number' | 'stars' | 'watches' | 'comments' | 'best_match'} [sort] 記事の並び順を指定します  - 設定可能な値   - &#x60;updated&#x60; (default)       - 記事の更新日時   - &#x60;created&#x60;       - 記事の作成日時   - &#x60;number&#x60;       - 記事番号   - &#x60;stars&#x60;       - 記事へのStarの数   - &#x60;watches&#x60;       - 記事へのWatchの数   - &#x60;comments&#x60;       - 記事へのCommentの数   - &#x60;best_match&#x60;       - 総合的な記事のスコア
     * @param {'asc' | 'desc'} [order] 設定可能な値:  - &#x60;desc&#x60;: 降順 (default) - &#x60;asc&#x60;: 昇順
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPosts(
      teamName: string,
      q?: string,
      include?: Array<"comments" | "comments.stargazers" | "stargazers">,
      sort?:
        | "updated"
        | "created"
        | "number"
        | "stars"
        | "watches"
        | "comments"
        | "best_match",
      order?: "asc" | "desc",
      page?: number,
      perPage?: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPosts>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPosts(
        teamName,
        q,
        include,
        sort,
        order,
        page,
        perPage,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary 所属するチームを取得する
     * @param {string} teamName チーム名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTeam(
      teamName: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTeam(
        teamName,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary チームの統計情報を取得する
     * @param {string} teamName チーム名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTeamStats(
      teamName: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamStats>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamStats(
        teamName,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary 所属するチーム一覧を取得する
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTeams(
      page?: number,
      perPage?: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedTeams>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTeams(
        page,
        perPage,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定された記事にWatchをしたユーザ一覧を取得します。
     * @summary Watchしたユーザー一覧を取得する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getWatchers(
      teamName: string,
      postNumber: number,
      page?: number,
      perPage?: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaginatedWatchers>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getWatchers(
        teamName,
        postNumber,
        page,
        perPage,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 招待したいメンバーへ個別の招待URLを発行し、指定したEメールアドレスへ送信します。  このAPIは**team**の**owner**だけがご利用可能です。
     * @summary Emailで招待する
     * @param {string} teamName チーム名
     * @param {InviteBody} inviteBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async invite(
      teamName: string,
      inviteBody: InviteBody,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitationList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.invite(
        teamName,
        inviteBody,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定されたコメントにStarをします。
     * @summary コメントをStarする
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {NewStar} newStar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async starComment(
      teamName: string,
      commentId: number,
      newStar: NewStar,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.starComment(
        teamName,
        commentId,
        newStar,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定された記事にStarをします。
     * @summary 記事をStarする
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {NewStar} newStar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async starPost(
      teamName: string,
      postNumber: number,
      newStar: NewStar,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.starPost(
        teamName,
        postNumber,
        newStar,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定されたコメントへのStarを取り消します。
     * @summary コメントのStarを取り消す
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unstarComment(
      teamName: string,
      commentId: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.unstarComment(
        teamName,
        commentId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定された記事へのStarを取り消します。
     * @summary 記事のStarを取り消す
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unstarPost(
      teamName: string,
      postNumber: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.unstarPost(
        teamName,
        postNumber,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定された記事へのWatchを取り消します。
     * @summary 記事のWatchを取り消す
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unwachPost(
      teamName: string,
      postNumber: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.unwachPost(
        teamName,
        postNumber,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定されたコメントを更新します。
     * @summary コメントを更新する
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {UpdateCommentBody} updateCommentBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateComment(
      teamName: string,
      commentId: number,
      updateCommentBody: UpdateCommentBody,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateComment(
        teamName,
        commentId,
        updateCommentBody,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定された記事を編集します。
     * @summary 記事を編集する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {UpdatePostBody} updatePostBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePost(
      teamName: string,
      postNumber: number,
      updatePostBody: UpdatePostBody,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePost(
        teamName,
        postNumber,
        updatePostBody,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 指定された記事にWatchをします。
     * @summary 記事をWatchする
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async watchPost(
      teamName: string,
      postNumber: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.watchPost(
        teamName,
        postNumber,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * EsaApi - factory interface
 * @export
 */
export const EsaApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = EsaApiFp(configuration);
  return {
    /**
     * 指定されたカテゴリを配下のカテゴリを含めて一括で変更します。
     * @summary カテゴリを一括移動する
     * @param {string} teamName チーム名
     * @param {BatchMoveOptions} batchMoveOptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchMoveCategory(
      teamName: string,
      batchMoveOptions: BatchMoveOptions,
      options?: any
    ): AxiosPromise<BatchMoveResult> {
      return localVarFp
        .batchMoveCategory(teamName, batchMoveOptions, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 記事に新しいコメントを作成します。
     * @summary コメントを投稿する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {CreateCommentBody} createCommentBody
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createComment(
      teamName: string,
      postNumber: number,
      createCommentBody: CreateCommentBody,
      page?: number,
      perPage?: number,
      options?: any
    ): AxiosPromise<Comment> {
      return localVarFp
        .createComment(
          teamName,
          postNumber,
          createCommentBody,
          page,
          perPage,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * 新しい絵文字を登録します。
     * @summary 絵文字を登録する
     * @param {string} teamName チーム名
     * @param {CreateEmojiBody} createEmojiBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmoji(
      teamName: string,
      createEmojiBody: CreateEmojiBody,
      options?: any
    ): AxiosPromise<CreatedEmoji> {
      return localVarFp
        .createEmoji(teamName, createEmojiBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 記事を投稿する
     * @param {string} teamName チーム名
     * @param {CreatePostBody} createPostBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPost(
      teamName: string,
      createPostBody: CreatePostBody,
      options?: any
    ): AxiosPromise<Post> {
      return localVarFp
        .createPost(teamName, createPostBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定されたコメントを削除します。
     * @summary コメントを削除する
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteComment(
      teamName: string,
      commentId: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .deleteComment(teamName, commentId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 登録したチーム固有の絵文字を削除します。
     * @summary 絵文字を削除する
     * @param {string} teamName チーム名
     * @param {string} code 絵文字コード
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEmoji(
      teamName: string,
      code: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .deleteEmoji(teamName, code, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定した screen_name のメンバーをチームから削除します。  - チームの owner である必要があります - APIで自分自身をチームから削除することはできません。
     * @summary メンバーを削除する
     * @param {string} teamName チーム名
     * @param {string} screenName 削除するメンバーのscreen_name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMember(
      teamName: string,
      screenName: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .deleteMember(teamName, screenName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定された記事を削除します。
     * @summary 記事を削除する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePost(
      teamName: string,
      postNumber: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .deletePost(teamName, postNumber, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 招待中のメンバーの招待を削除します。招待時に送信されたメールに記載された招待用のURLは無効となります。 このAPIは**team**の**owner**だけがご利用可能です。
     * @summary 招待を取り下げる
     * @param {string} teamName チーム名
     * @param {string} code 招待時の識別子を指定します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    disinvite(
      teamName: string,
      code: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .disinvite(teamName, code, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 現在のアクセストークンで認証中のユーザーの情報を取得します。
     * @summary 認証中のユーザーを取得する
     * @param {'teams'} [include] teams を指定すると所属するチームの配列を含んだレスポンスを返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatedUser(
      include?: "teams",
      options?: any
    ): AxiosPromise<AuthenticatedUser> {
      return localVarFp
        .getAuthenticatedUser(include, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定されたコメントを取得します。
     * @summary コメントを取得する
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {'stargazers'} [include] &#x60;stargazers&#x60;を指定するとStarの配列を含んだレスポンスを返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComment(
      teamName: string,
      commentId: number,
      include?: "stargazers",
      options?: any
    ): AxiosPromise<Comment> {
      return localVarFp
        .getComment(teamName, commentId, include, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定されたコメントにStarをしたユーザ一覧を取得します。
     * @summary コメントのStarを取得する
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommentStargazers(
      teamName: string,
      commentId: number,
      page?: number,
      perPage?: number,
      options?: any
    ): AxiosPromise<PaginatedStargazers> {
      return localVarFp
        .getCommentStargazers(teamName, commentId, page, perPage, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * チーム全体のコメント一覧を作成日の降順で返却します。
     * @summary コメント一覧を取得する
     * @param {string} teamName チーム名
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComments(
      teamName: string,
      page?: number,
      perPage?: number,
      options?: any
    ): AxiosPromise<PaginatedComments> {
      return localVarFp
        .getComments(teamName, page, perPage, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * チームで利用可能な絵文字を取得します。URIクエリ文字列を含めない場合、チーム固有の絵文字だけを取得します。
     * @summary 絵文字一覧を取得する
     * @param {string} teamName チーム名
     * @param {'all'} [include] &#x60;all&#x60;を指定すると、チーム固有の絵文字だけではなく、すべての絵文字を返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmojis(
      teamName: string,
      include?: "all",
      options?: any
    ): AxiosPromise<EmojiList> {
      return localVarFp
        .getEmojis(teamName, include, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 招待中のメンバーの一覧を取得します。  このAPIは**team**の**owner**だけがご利用可能です。
     * @summary 招待中のメンバー一覧を取得する
     * @param {string} teamName チーム名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvitations(
      teamName: string,
      options?: any
    ): AxiosPromise<InvitationList> {
      return localVarFp
        .getInvitations(teamName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary メンバーを取得する
     * @param {string} teamName チーム名
     * @param {'posts_count' | 'joined' | 'last_accessed'} [sort]
     * @param {'asc' | 'desc'} [order] 設定可能な値:  - &#x60;desc&#x60;: 降順 (default) - &#x60;asc&#x60;: 昇順
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMembers(
      teamName: string,
      sort?: "posts_count" | "joined" | "last_accessed",
      order?: "asc" | "desc",
      page?: number,
      perPage?: number,
      options?: any
    ): AxiosPromise<PaginatedMembers> {
      return localVarFp
        .getMembers(teamName, sort, order, page, perPage, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定された記事を取得します。
     * @summary 記事を取得する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {Array<'comments' | 'comments.stargazers' | 'stargazers'>} [include] - &#x60;comments&#x60; を指定するとコメントの配列を含んだレスポンスを返します。 - &#x60;comments,comments.stargazers&#x60;を指定するとコメントとコメントに対するStarの配列を含んだレスポンスを返します。 - &#x60;stargazers&#x60; を指定するとStarの配列を含んだレスポンスを返します。 - &#x60;stargazers,comments&#x60; のように &#x60;,&#x60; で区切ることで複数指定できます
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPost(
      teamName: string,
      postNumber: number,
      include?: Array<"comments" | "comments.stargazers" | "stargazers">,
      options?: any
    ): AxiosPromise<Post> {
      return localVarFp
        .getPost(teamName, postNumber, include, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 記事のコメント一覧を更新日の降順で返却します。
     * @summary 記事のコメント一覧を取得する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostComments(
      teamName: string,
      postNumber: number,
      page?: number,
      perPage?: number,
      options?: any
    ): AxiosPromise<PaginatedComments> {
      return localVarFp
        .getPostComments(teamName, postNumber, page, perPage, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定された記事にStarをしたユーザ一覧を取得します。
     * @summary 記事のStarを取得する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostStargazers(
      teamName: string,
      postNumber: number,
      page?: number,
      perPage?: number,
      options?: any
    ): AxiosPromise<PaginatedStargazers> {
      return localVarFp
        .getPostStargazers(teamName, postNumber, page, perPage, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 記事一覧を取得する
     * @param {string} teamName チーム名
     * @param {string} [q] 記事を絞り込むための条件を指定します
     * @param {Array<'comments' | 'comments.stargazers' | 'stargazers'>} [include] - &#x60;comments&#x60; を指定するとコメントの配列を含んだレスポンスを返します。 - &#x60;comments,comments.stargazers&#x60;を指定するとコメントとコメントに対するStarの配列を含んだレスポンスを返します。 - &#x60;stargazers&#x60; を指定するとStarの配列を含んだレスポンスを返します。 - &#x60;stargazers,comments&#x60; のように &#x60;,&#x60; で区切ることで複数指定できます
     * @param {'updated' | 'created' | 'number' | 'stars' | 'watches' | 'comments' | 'best_match'} [sort] 記事の並び順を指定します  - 設定可能な値   - &#x60;updated&#x60; (default)       - 記事の更新日時   - &#x60;created&#x60;       - 記事の作成日時   - &#x60;number&#x60;       - 記事番号   - &#x60;stars&#x60;       - 記事へのStarの数   - &#x60;watches&#x60;       - 記事へのWatchの数   - &#x60;comments&#x60;       - 記事へのCommentの数   - &#x60;best_match&#x60;       - 総合的な記事のスコア
     * @param {'asc' | 'desc'} [order] 設定可能な値:  - &#x60;desc&#x60;: 降順 (default) - &#x60;asc&#x60;: 昇順
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPosts(
      teamName: string,
      q?: string,
      include?: Array<"comments" | "comments.stargazers" | "stargazers">,
      sort?:
        | "updated"
        | "created"
        | "number"
        | "stars"
        | "watches"
        | "comments"
        | "best_match",
      order?: "asc" | "desc",
      page?: number,
      perPage?: number,
      options?: any
    ): AxiosPromise<PaginatedPosts> {
      return localVarFp
        .getPosts(teamName, q, include, sort, order, page, perPage, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 所属するチームを取得する
     * @param {string} teamName チーム名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeam(teamName: string, options?: any): AxiosPromise<Team> {
      return localVarFp
        .getTeam(teamName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary チームの統計情報を取得する
     * @param {string} teamName チーム名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeamStats(teamName: string, options?: any): AxiosPromise<TeamStats> {
      return localVarFp
        .getTeamStats(teamName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 所属するチーム一覧を取得する
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeams(
      page?: number,
      perPage?: number,
      options?: any
    ): AxiosPromise<PaginatedTeams> {
      return localVarFp
        .getTeams(page, perPage, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定された記事にWatchをしたユーザ一覧を取得します。
     * @summary Watchしたユーザー一覧を取得する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {number} [page] ページ番号
     * @param {number} [perPage] 1ページあたりに含まれる要素数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWatchers(
      teamName: string,
      postNumber: number,
      page?: number,
      perPage?: number,
      options?: any
    ): AxiosPromise<PaginatedWatchers> {
      return localVarFp
        .getWatchers(teamName, postNumber, page, perPage, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 招待したいメンバーへ個別の招待URLを発行し、指定したEメールアドレスへ送信します。  このAPIは**team**の**owner**だけがご利用可能です。
     * @summary Emailで招待する
     * @param {string} teamName チーム名
     * @param {InviteBody} inviteBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invite(
      teamName: string,
      inviteBody: InviteBody,
      options?: any
    ): AxiosPromise<InvitationList> {
      return localVarFp
        .invite(teamName, inviteBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定されたコメントにStarをします。
     * @summary コメントをStarする
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {NewStar} newStar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    starComment(
      teamName: string,
      commentId: number,
      newStar: NewStar,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .starComment(teamName, commentId, newStar, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定された記事にStarをします。
     * @summary 記事をStarする
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {NewStar} newStar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    starPost(
      teamName: string,
      postNumber: number,
      newStar: NewStar,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .starPost(teamName, postNumber, newStar, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定されたコメントへのStarを取り消します。
     * @summary コメントのStarを取り消す
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unstarComment(
      teamName: string,
      commentId: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .unstarComment(teamName, commentId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定された記事へのStarを取り消します。
     * @summary 記事のStarを取り消す
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unstarPost(
      teamName: string,
      postNumber: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .unstarPost(teamName, postNumber, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定された記事へのWatchを取り消します。
     * @summary 記事のWatchを取り消す
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unwachPost(
      teamName: string,
      postNumber: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .unwachPost(teamName, postNumber, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定されたコメントを更新します。
     * @summary コメントを更新する
     * @param {string} teamName チーム名
     * @param {number} commentId コメントID
     * @param {UpdateCommentBody} updateCommentBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateComment(
      teamName: string,
      commentId: number,
      updateCommentBody: UpdateCommentBody,
      options?: any
    ): AxiosPromise<Comment> {
      return localVarFp
        .updateComment(teamName, commentId, updateCommentBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定された記事を編集します。
     * @summary 記事を編集する
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {UpdatePostBody} updatePostBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePost(
      teamName: string,
      postNumber: number,
      updatePostBody: UpdatePostBody,
      options?: any
    ): AxiosPromise<Post> {
      return localVarFp
        .updatePost(teamName, postNumber, updatePostBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定された記事にWatchをします。
     * @summary 記事をWatchする
     * @param {string} teamName チーム名
     * @param {number} postNumber 記事ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    watchPost(
      teamName: string,
      postNumber: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .watchPost(teamName, postNumber, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for batchMoveCategory operation in EsaApi.
 * @export
 * @interface EsaApiBatchMoveCategoryRequest
 */
export interface EsaApiBatchMoveCategoryRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiBatchMoveCategory
   */
  readonly teamName: string;

  /**
   *
   * @type {BatchMoveOptions}
   * @memberof EsaApiBatchMoveCategory
   */
  readonly batchMoveOptions: BatchMoveOptions;
}

/**
 * Request parameters for createComment operation in EsaApi.
 * @export
 * @interface EsaApiCreateCommentRequest
 */
export interface EsaApiCreateCommentRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiCreateComment
   */
  readonly teamName: string;

  /**
   * 記事ID
   * @type {number}
   * @memberof EsaApiCreateComment
   */
  readonly postNumber: number;

  /**
   *
   * @type {CreateCommentBody}
   * @memberof EsaApiCreateComment
   */
  readonly createCommentBody: CreateCommentBody;

  /**
   * ページ番号
   * @type {number}
   * @memberof EsaApiCreateComment
   */
  readonly page?: number;

  /**
   * 1ページあたりに含まれる要素数
   * @type {number}
   * @memberof EsaApiCreateComment
   */
  readonly perPage?: number;
}

/**
 * Request parameters for createEmoji operation in EsaApi.
 * @export
 * @interface EsaApiCreateEmojiRequest
 */
export interface EsaApiCreateEmojiRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiCreateEmoji
   */
  readonly teamName: string;

  /**
   *
   * @type {CreateEmojiBody}
   * @memberof EsaApiCreateEmoji
   */
  readonly createEmojiBody: CreateEmojiBody;
}

/**
 * Request parameters for createPost operation in EsaApi.
 * @export
 * @interface EsaApiCreatePostRequest
 */
export interface EsaApiCreatePostRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiCreatePost
   */
  readonly teamName: string;

  /**
   *
   * @type {CreatePostBody}
   * @memberof EsaApiCreatePost
   */
  readonly createPostBody: CreatePostBody;
}

/**
 * Request parameters for deleteComment operation in EsaApi.
 * @export
 * @interface EsaApiDeleteCommentRequest
 */
export interface EsaApiDeleteCommentRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiDeleteComment
   */
  readonly teamName: string;

  /**
   * コメントID
   * @type {number}
   * @memberof EsaApiDeleteComment
   */
  readonly commentId: number;
}

/**
 * Request parameters for deleteEmoji operation in EsaApi.
 * @export
 * @interface EsaApiDeleteEmojiRequest
 */
export interface EsaApiDeleteEmojiRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiDeleteEmoji
   */
  readonly teamName: string;

  /**
   * 絵文字コード
   * @type {string}
   * @memberof EsaApiDeleteEmoji
   */
  readonly code: string;
}

/**
 * Request parameters for deleteMember operation in EsaApi.
 * @export
 * @interface EsaApiDeleteMemberRequest
 */
export interface EsaApiDeleteMemberRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiDeleteMember
   */
  readonly teamName: string;

  /**
   * 削除するメンバーのscreen_name
   * @type {string}
   * @memberof EsaApiDeleteMember
   */
  readonly screenName: string;
}

/**
 * Request parameters for deletePost operation in EsaApi.
 * @export
 * @interface EsaApiDeletePostRequest
 */
export interface EsaApiDeletePostRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiDeletePost
   */
  readonly teamName: string;

  /**
   * 記事ID
   * @type {number}
   * @memberof EsaApiDeletePost
   */
  readonly postNumber: number;
}

/**
 * Request parameters for disinvite operation in EsaApi.
 * @export
 * @interface EsaApiDisinviteRequest
 */
export interface EsaApiDisinviteRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiDisinvite
   */
  readonly teamName: string;

  /**
   * 招待時の識別子を指定します
   * @type {string}
   * @memberof EsaApiDisinvite
   */
  readonly code: string;
}

/**
 * Request parameters for getAuthenticatedUser operation in EsaApi.
 * @export
 * @interface EsaApiGetAuthenticatedUserRequest
 */
export interface EsaApiGetAuthenticatedUserRequest {
  /**
   * teams を指定すると所属するチームの配列を含んだレスポンスを返します。
   * @type {'teams'}
   * @memberof EsaApiGetAuthenticatedUser
   */
  readonly include?: "teams";
}

/**
 * Request parameters for getComment operation in EsaApi.
 * @export
 * @interface EsaApiGetCommentRequest
 */
export interface EsaApiGetCommentRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiGetComment
   */
  readonly teamName: string;

  /**
   * コメントID
   * @type {number}
   * @memberof EsaApiGetComment
   */
  readonly commentId: number;

  /**
   * &#x60;stargazers&#x60;を指定するとStarの配列を含んだレスポンスを返します。
   * @type {'stargazers'}
   * @memberof EsaApiGetComment
   */
  readonly include?: "stargazers";
}

/**
 * Request parameters for getCommentStargazers operation in EsaApi.
 * @export
 * @interface EsaApiGetCommentStargazersRequest
 */
export interface EsaApiGetCommentStargazersRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiGetCommentStargazers
   */
  readonly teamName: string;

  /**
   * コメントID
   * @type {number}
   * @memberof EsaApiGetCommentStargazers
   */
  readonly commentId: number;

  /**
   * ページ番号
   * @type {number}
   * @memberof EsaApiGetCommentStargazers
   */
  readonly page?: number;

  /**
   * 1ページあたりに含まれる要素数
   * @type {number}
   * @memberof EsaApiGetCommentStargazers
   */
  readonly perPage?: number;
}

/**
 * Request parameters for getComments operation in EsaApi.
 * @export
 * @interface EsaApiGetCommentsRequest
 */
export interface EsaApiGetCommentsRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiGetComments
   */
  readonly teamName: string;

  /**
   * ページ番号
   * @type {number}
   * @memberof EsaApiGetComments
   */
  readonly page?: number;

  /**
   * 1ページあたりに含まれる要素数
   * @type {number}
   * @memberof EsaApiGetComments
   */
  readonly perPage?: number;
}

/**
 * Request parameters for getEmojis operation in EsaApi.
 * @export
 * @interface EsaApiGetEmojisRequest
 */
export interface EsaApiGetEmojisRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiGetEmojis
   */
  readonly teamName: string;

  /**
   * &#x60;all&#x60;を指定すると、チーム固有の絵文字だけではなく、すべての絵文字を返します。
   * @type {'all'}
   * @memberof EsaApiGetEmojis
   */
  readonly include?: "all";
}

/**
 * Request parameters for getInvitations operation in EsaApi.
 * @export
 * @interface EsaApiGetInvitationsRequest
 */
export interface EsaApiGetInvitationsRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiGetInvitations
   */
  readonly teamName: string;
}

/**
 * Request parameters for getMembers operation in EsaApi.
 * @export
 * @interface EsaApiGetMembersRequest
 */
export interface EsaApiGetMembersRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiGetMembers
   */
  readonly teamName: string;

  /**
   *
   * @type {'posts_count' | 'joined' | 'last_accessed'}
   * @memberof EsaApiGetMembers
   */
  readonly sort?: "posts_count" | "joined" | "last_accessed";

  /**
   * 設定可能な値:  - &#x60;desc&#x60;: 降順 (default) - &#x60;asc&#x60;: 昇順
   * @type {'asc' | 'desc'}
   * @memberof EsaApiGetMembers
   */
  readonly order?: "asc" | "desc";

  /**
   * ページ番号
   * @type {number}
   * @memberof EsaApiGetMembers
   */
  readonly page?: number;

  /**
   * 1ページあたりに含まれる要素数
   * @type {number}
   * @memberof EsaApiGetMembers
   */
  readonly perPage?: number;
}

/**
 * Request parameters for getPost operation in EsaApi.
 * @export
 * @interface EsaApiGetPostRequest
 */
export interface EsaApiGetPostRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiGetPost
   */
  readonly teamName: string;

  /**
   * 記事ID
   * @type {number}
   * @memberof EsaApiGetPost
   */
  readonly postNumber: number;

  /**
   * - &#x60;comments&#x60; を指定するとコメントの配列を含んだレスポンスを返します。 - &#x60;comments,comments.stargazers&#x60;を指定するとコメントとコメントに対するStarの配列を含んだレスポンスを返します。 - &#x60;stargazers&#x60; を指定するとStarの配列を含んだレスポンスを返します。 - &#x60;stargazers,comments&#x60; のように &#x60;,&#x60; で区切ることで複数指定できます
   * @type {Array<'comments' | 'comments.stargazers' | 'stargazers'>}
   * @memberof EsaApiGetPost
   */
  readonly include?: Array<"comments" | "comments.stargazers" | "stargazers">;
}

/**
 * Request parameters for getPostComments operation in EsaApi.
 * @export
 * @interface EsaApiGetPostCommentsRequest
 */
export interface EsaApiGetPostCommentsRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiGetPostComments
   */
  readonly teamName: string;

  /**
   * 記事ID
   * @type {number}
   * @memberof EsaApiGetPostComments
   */
  readonly postNumber: number;

  /**
   * ページ番号
   * @type {number}
   * @memberof EsaApiGetPostComments
   */
  readonly page?: number;

  /**
   * 1ページあたりに含まれる要素数
   * @type {number}
   * @memberof EsaApiGetPostComments
   */
  readonly perPage?: number;
}

/**
 * Request parameters for getPostStargazers operation in EsaApi.
 * @export
 * @interface EsaApiGetPostStargazersRequest
 */
export interface EsaApiGetPostStargazersRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiGetPostStargazers
   */
  readonly teamName: string;

  /**
   * 記事ID
   * @type {number}
   * @memberof EsaApiGetPostStargazers
   */
  readonly postNumber: number;

  /**
   * ページ番号
   * @type {number}
   * @memberof EsaApiGetPostStargazers
   */
  readonly page?: number;

  /**
   * 1ページあたりに含まれる要素数
   * @type {number}
   * @memberof EsaApiGetPostStargazers
   */
  readonly perPage?: number;
}

/**
 * Request parameters for getPosts operation in EsaApi.
 * @export
 * @interface EsaApiGetPostsRequest
 */
export interface EsaApiGetPostsRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiGetPosts
   */
  readonly teamName: string;

  /**
   * 記事を絞り込むための条件を指定します
   * @type {string}
   * @memberof EsaApiGetPosts
   */
  readonly q?: string;

  /**
   * - &#x60;comments&#x60; を指定するとコメントの配列を含んだレスポンスを返します。 - &#x60;comments,comments.stargazers&#x60;を指定するとコメントとコメントに対するStarの配列を含んだレスポンスを返します。 - &#x60;stargazers&#x60; を指定するとStarの配列を含んだレスポンスを返します。 - &#x60;stargazers,comments&#x60; のように &#x60;,&#x60; で区切ることで複数指定できます
   * @type {Array<'comments' | 'comments.stargazers' | 'stargazers'>}
   * @memberof EsaApiGetPosts
   */
  readonly include?: Array<"comments" | "comments.stargazers" | "stargazers">;

  /**
   * 記事の並び順を指定します  - 設定可能な値   - &#x60;updated&#x60; (default)       - 記事の更新日時   - &#x60;created&#x60;       - 記事の作成日時   - &#x60;number&#x60;       - 記事番号   - &#x60;stars&#x60;       - 記事へのStarの数   - &#x60;watches&#x60;       - 記事へのWatchの数   - &#x60;comments&#x60;       - 記事へのCommentの数   - &#x60;best_match&#x60;       - 総合的な記事のスコア
   * @type {'updated' | 'created' | 'number' | 'stars' | 'watches' | 'comments' | 'best_match'}
   * @memberof EsaApiGetPosts
   */
  readonly sort?:
    | "updated"
    | "created"
    | "number"
    | "stars"
    | "watches"
    | "comments"
    | "best_match";

  /**
   * 設定可能な値:  - &#x60;desc&#x60;: 降順 (default) - &#x60;asc&#x60;: 昇順
   * @type {'asc' | 'desc'}
   * @memberof EsaApiGetPosts
   */
  readonly order?: "asc" | "desc";

  /**
   * ページ番号
   * @type {number}
   * @memberof EsaApiGetPosts
   */
  readonly page?: number;

  /**
   * 1ページあたりに含まれる要素数
   * @type {number}
   * @memberof EsaApiGetPosts
   */
  readonly perPage?: number;
}

/**
 * Request parameters for getTeam operation in EsaApi.
 * @export
 * @interface EsaApiGetTeamRequest
 */
export interface EsaApiGetTeamRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiGetTeam
   */
  readonly teamName: string;
}

/**
 * Request parameters for getTeamStats operation in EsaApi.
 * @export
 * @interface EsaApiGetTeamStatsRequest
 */
export interface EsaApiGetTeamStatsRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiGetTeamStats
   */
  readonly teamName: string;
}

/**
 * Request parameters for getTeams operation in EsaApi.
 * @export
 * @interface EsaApiGetTeamsRequest
 */
export interface EsaApiGetTeamsRequest {
  /**
   * ページ番号
   * @type {number}
   * @memberof EsaApiGetTeams
   */
  readonly page?: number;

  /**
   * 1ページあたりに含まれる要素数
   * @type {number}
   * @memberof EsaApiGetTeams
   */
  readonly perPage?: number;
}

/**
 * Request parameters for getWatchers operation in EsaApi.
 * @export
 * @interface EsaApiGetWatchersRequest
 */
export interface EsaApiGetWatchersRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiGetWatchers
   */
  readonly teamName: string;

  /**
   * 記事ID
   * @type {number}
   * @memberof EsaApiGetWatchers
   */
  readonly postNumber: number;

  /**
   * ページ番号
   * @type {number}
   * @memberof EsaApiGetWatchers
   */
  readonly page?: number;

  /**
   * 1ページあたりに含まれる要素数
   * @type {number}
   * @memberof EsaApiGetWatchers
   */
  readonly perPage?: number;
}

/**
 * Request parameters for invite operation in EsaApi.
 * @export
 * @interface EsaApiInviteRequest
 */
export interface EsaApiInviteRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiInvite
   */
  readonly teamName: string;

  /**
   *
   * @type {InviteBody}
   * @memberof EsaApiInvite
   */
  readonly inviteBody: InviteBody;
}

/**
 * Request parameters for starComment operation in EsaApi.
 * @export
 * @interface EsaApiStarCommentRequest
 */
export interface EsaApiStarCommentRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiStarComment
   */
  readonly teamName: string;

  /**
   * コメントID
   * @type {number}
   * @memberof EsaApiStarComment
   */
  readonly commentId: number;

  /**
   *
   * @type {NewStar}
   * @memberof EsaApiStarComment
   */
  readonly newStar: NewStar;
}

/**
 * Request parameters for starPost operation in EsaApi.
 * @export
 * @interface EsaApiStarPostRequest
 */
export interface EsaApiStarPostRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiStarPost
   */
  readonly teamName: string;

  /**
   * 記事ID
   * @type {number}
   * @memberof EsaApiStarPost
   */
  readonly postNumber: number;

  /**
   *
   * @type {NewStar}
   * @memberof EsaApiStarPost
   */
  readonly newStar: NewStar;
}

/**
 * Request parameters for unstarComment operation in EsaApi.
 * @export
 * @interface EsaApiUnstarCommentRequest
 */
export interface EsaApiUnstarCommentRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiUnstarComment
   */
  readonly teamName: string;

  /**
   * コメントID
   * @type {number}
   * @memberof EsaApiUnstarComment
   */
  readonly commentId: number;
}

/**
 * Request parameters for unstarPost operation in EsaApi.
 * @export
 * @interface EsaApiUnstarPostRequest
 */
export interface EsaApiUnstarPostRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiUnstarPost
   */
  readonly teamName: string;

  /**
   * 記事ID
   * @type {number}
   * @memberof EsaApiUnstarPost
   */
  readonly postNumber: number;
}

/**
 * Request parameters for unwachPost operation in EsaApi.
 * @export
 * @interface EsaApiUnwachPostRequest
 */
export interface EsaApiUnwachPostRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiUnwachPost
   */
  readonly teamName: string;

  /**
   * 記事ID
   * @type {number}
   * @memberof EsaApiUnwachPost
   */
  readonly postNumber: number;
}

/**
 * Request parameters for updateComment operation in EsaApi.
 * @export
 * @interface EsaApiUpdateCommentRequest
 */
export interface EsaApiUpdateCommentRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiUpdateComment
   */
  readonly teamName: string;

  /**
   * コメントID
   * @type {number}
   * @memberof EsaApiUpdateComment
   */
  readonly commentId: number;

  /**
   *
   * @type {UpdateCommentBody}
   * @memberof EsaApiUpdateComment
   */
  readonly updateCommentBody: UpdateCommentBody;
}

/**
 * Request parameters for updatePost operation in EsaApi.
 * @export
 * @interface EsaApiUpdatePostRequest
 */
export interface EsaApiUpdatePostRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiUpdatePost
   */
  readonly teamName: string;

  /**
   * 記事ID
   * @type {number}
   * @memberof EsaApiUpdatePost
   */
  readonly postNumber: number;

  /**
   *
   * @type {UpdatePostBody}
   * @memberof EsaApiUpdatePost
   */
  readonly updatePostBody: UpdatePostBody;
}

/**
 * Request parameters for watchPost operation in EsaApi.
 * @export
 * @interface EsaApiWatchPostRequest
 */
export interface EsaApiWatchPostRequest {
  /**
   * チーム名
   * @type {string}
   * @memberof EsaApiWatchPost
   */
  readonly teamName: string;

  /**
   * 記事ID
   * @type {number}
   * @memberof EsaApiWatchPost
   */
  readonly postNumber: number;
}

/**
 * EsaApi - object-oriented interface
 * @export
 * @class EsaApi
 * @extends {BaseAPI}
 */
export class EsaApi extends BaseAPI {
  /**
   * 指定されたカテゴリを配下のカテゴリを含めて一括で変更します。
   * @summary カテゴリを一括移動する
   * @param {EsaApiBatchMoveCategoryRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public batchMoveCategory(
    requestParameters: EsaApiBatchMoveCategoryRequest,
    options?: any
  ) {
    return EsaApiFp(this.configuration)
      .batchMoveCategory(
        requestParameters.teamName,
        requestParameters.batchMoveOptions,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 記事に新しいコメントを作成します。
   * @summary コメントを投稿する
   * @param {EsaApiCreateCommentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public createComment(
    requestParameters: EsaApiCreateCommentRequest,
    options?: any
  ) {
    return EsaApiFp(this.configuration)
      .createComment(
        requestParameters.teamName,
        requestParameters.postNumber,
        requestParameters.createCommentBody,
        requestParameters.page,
        requestParameters.perPage,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 新しい絵文字を登録します。
   * @summary 絵文字を登録する
   * @param {EsaApiCreateEmojiRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public createEmoji(
    requestParameters: EsaApiCreateEmojiRequest,
    options?: any
  ) {
    return EsaApiFp(this.configuration)
      .createEmoji(
        requestParameters.teamName,
        requestParameters.createEmojiBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 記事を投稿する
   * @param {EsaApiCreatePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public createPost(requestParameters: EsaApiCreatePostRequest, options?: any) {
    return EsaApiFp(this.configuration)
      .createPost(
        requestParameters.teamName,
        requestParameters.createPostBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定されたコメントを削除します。
   * @summary コメントを削除する
   * @param {EsaApiDeleteCommentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public deleteComment(
    requestParameters: EsaApiDeleteCommentRequest,
    options?: any
  ) {
    return EsaApiFp(this.configuration)
      .deleteComment(
        requestParameters.teamName,
        requestParameters.commentId,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 登録したチーム固有の絵文字を削除します。
   * @summary 絵文字を削除する
   * @param {EsaApiDeleteEmojiRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public deleteEmoji(
    requestParameters: EsaApiDeleteEmojiRequest,
    options?: any
  ) {
    return EsaApiFp(this.configuration)
      .deleteEmoji(requestParameters.teamName, requestParameters.code, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定した screen_name のメンバーをチームから削除します。  - チームの owner である必要があります - APIで自分自身をチームから削除することはできません。
   * @summary メンバーを削除する
   * @param {EsaApiDeleteMemberRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public deleteMember(
    requestParameters: EsaApiDeleteMemberRequest,
    options?: any
  ) {
    return EsaApiFp(this.configuration)
      .deleteMember(
        requestParameters.teamName,
        requestParameters.screenName,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定された記事を削除します。
   * @summary 記事を削除する
   * @param {EsaApiDeletePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public deletePost(requestParameters: EsaApiDeletePostRequest, options?: any) {
    return EsaApiFp(this.configuration)
      .deletePost(
        requestParameters.teamName,
        requestParameters.postNumber,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 招待中のメンバーの招待を削除します。招待時に送信されたメールに記載された招待用のURLは無効となります。 このAPIは**team**の**owner**だけがご利用可能です。
   * @summary 招待を取り下げる
   * @param {EsaApiDisinviteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public disinvite(requestParameters: EsaApiDisinviteRequest, options?: any) {
    return EsaApiFp(this.configuration)
      .disinvite(requestParameters.teamName, requestParameters.code, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 現在のアクセストークンで認証中のユーザーの情報を取得します。
   * @summary 認証中のユーザーを取得する
   * @param {EsaApiGetAuthenticatedUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public getAuthenticatedUser(
    requestParameters: EsaApiGetAuthenticatedUserRequest = {},
    options?: any
  ) {
    return EsaApiFp(this.configuration)
      .getAuthenticatedUser(requestParameters.include, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定されたコメントを取得します。
   * @summary コメントを取得する
   * @param {EsaApiGetCommentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public getComment(requestParameters: EsaApiGetCommentRequest, options?: any) {
    return EsaApiFp(this.configuration)
      .getComment(
        requestParameters.teamName,
        requestParameters.commentId,
        requestParameters.include,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定されたコメントにStarをしたユーザ一覧を取得します。
   * @summary コメントのStarを取得する
   * @param {EsaApiGetCommentStargazersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public getCommentStargazers(
    requestParameters: EsaApiGetCommentStargazersRequest,
    options?: any
  ) {
    return EsaApiFp(this.configuration)
      .getCommentStargazers(
        requestParameters.teamName,
        requestParameters.commentId,
        requestParameters.page,
        requestParameters.perPage,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * チーム全体のコメント一覧を作成日の降順で返却します。
   * @summary コメント一覧を取得する
   * @param {EsaApiGetCommentsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public getComments(
    requestParameters: EsaApiGetCommentsRequest,
    options?: any
  ) {
    return EsaApiFp(this.configuration)
      .getComments(
        requestParameters.teamName,
        requestParameters.page,
        requestParameters.perPage,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * チームで利用可能な絵文字を取得します。URIクエリ文字列を含めない場合、チーム固有の絵文字だけを取得します。
   * @summary 絵文字一覧を取得する
   * @param {EsaApiGetEmojisRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public getEmojis(requestParameters: EsaApiGetEmojisRequest, options?: any) {
    return EsaApiFp(this.configuration)
      .getEmojis(requestParameters.teamName, requestParameters.include, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 招待中のメンバーの一覧を取得します。  このAPIは**team**の**owner**だけがご利用可能です。
   * @summary 招待中のメンバー一覧を取得する
   * @param {EsaApiGetInvitationsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public getInvitations(
    requestParameters: EsaApiGetInvitationsRequest,
    options?: any
  ) {
    return EsaApiFp(this.configuration)
      .getInvitations(requestParameters.teamName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary メンバーを取得する
   * @param {EsaApiGetMembersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public getMembers(requestParameters: EsaApiGetMembersRequest, options?: any) {
    return EsaApiFp(this.configuration)
      .getMembers(
        requestParameters.teamName,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.page,
        requestParameters.perPage,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定された記事を取得します。
   * @summary 記事を取得する
   * @param {EsaApiGetPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public getPost(requestParameters: EsaApiGetPostRequest, options?: any) {
    return EsaApiFp(this.configuration)
      .getPost(
        requestParameters.teamName,
        requestParameters.postNumber,
        requestParameters.include,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 記事のコメント一覧を更新日の降順で返却します。
   * @summary 記事のコメント一覧を取得する
   * @param {EsaApiGetPostCommentsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public getPostComments(
    requestParameters: EsaApiGetPostCommentsRequest,
    options?: any
  ) {
    return EsaApiFp(this.configuration)
      .getPostComments(
        requestParameters.teamName,
        requestParameters.postNumber,
        requestParameters.page,
        requestParameters.perPage,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定された記事にStarをしたユーザ一覧を取得します。
   * @summary 記事のStarを取得する
   * @param {EsaApiGetPostStargazersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public getPostStargazers(
    requestParameters: EsaApiGetPostStargazersRequest,
    options?: any
  ) {
    return EsaApiFp(this.configuration)
      .getPostStargazers(
        requestParameters.teamName,
        requestParameters.postNumber,
        requestParameters.page,
        requestParameters.perPage,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 記事一覧を取得する
   * @param {EsaApiGetPostsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public getPosts(requestParameters: EsaApiGetPostsRequest, options?: any) {
    return EsaApiFp(this.configuration)
      .getPosts(
        requestParameters.teamName,
        requestParameters.q,
        requestParameters.include,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.page,
        requestParameters.perPage,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 所属するチームを取得する
   * @param {EsaApiGetTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public getTeam(requestParameters: EsaApiGetTeamRequest, options?: any) {
    return EsaApiFp(this.configuration)
      .getTeam(requestParameters.teamName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary チームの統計情報を取得する
   * @param {EsaApiGetTeamStatsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public getTeamStats(
    requestParameters: EsaApiGetTeamStatsRequest,
    options?: any
  ) {
    return EsaApiFp(this.configuration)
      .getTeamStats(requestParameters.teamName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 所属するチーム一覧を取得する
   * @param {EsaApiGetTeamsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public getTeams(
    requestParameters: EsaApiGetTeamsRequest = {},
    options?: any
  ) {
    return EsaApiFp(this.configuration)
      .getTeams(requestParameters.page, requestParameters.perPage, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定された記事にWatchをしたユーザ一覧を取得します。
   * @summary Watchしたユーザー一覧を取得する
   * @param {EsaApiGetWatchersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public getWatchers(
    requestParameters: EsaApiGetWatchersRequest,
    options?: any
  ) {
    return EsaApiFp(this.configuration)
      .getWatchers(
        requestParameters.teamName,
        requestParameters.postNumber,
        requestParameters.page,
        requestParameters.perPage,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 招待したいメンバーへ個別の招待URLを発行し、指定したEメールアドレスへ送信します。  このAPIは**team**の**owner**だけがご利用可能です。
   * @summary Emailで招待する
   * @param {EsaApiInviteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public invite(requestParameters: EsaApiInviteRequest, options?: any) {
    return EsaApiFp(this.configuration)
      .invite(requestParameters.teamName, requestParameters.inviteBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定されたコメントにStarをします。
   * @summary コメントをStarする
   * @param {EsaApiStarCommentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public starComment(
    requestParameters: EsaApiStarCommentRequest,
    options?: any
  ) {
    return EsaApiFp(this.configuration)
      .starComment(
        requestParameters.teamName,
        requestParameters.commentId,
        requestParameters.newStar,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定された記事にStarをします。
   * @summary 記事をStarする
   * @param {EsaApiStarPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public starPost(requestParameters: EsaApiStarPostRequest, options?: any) {
    return EsaApiFp(this.configuration)
      .starPost(
        requestParameters.teamName,
        requestParameters.postNumber,
        requestParameters.newStar,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定されたコメントへのStarを取り消します。
   * @summary コメントのStarを取り消す
   * @param {EsaApiUnstarCommentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public unstarComment(
    requestParameters: EsaApiUnstarCommentRequest,
    options?: any
  ) {
    return EsaApiFp(this.configuration)
      .unstarComment(
        requestParameters.teamName,
        requestParameters.commentId,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定された記事へのStarを取り消します。
   * @summary 記事のStarを取り消す
   * @param {EsaApiUnstarPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public unstarPost(requestParameters: EsaApiUnstarPostRequest, options?: any) {
    return EsaApiFp(this.configuration)
      .unstarPost(
        requestParameters.teamName,
        requestParameters.postNumber,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定された記事へのWatchを取り消します。
   * @summary 記事のWatchを取り消す
   * @param {EsaApiUnwachPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public unwachPost(requestParameters: EsaApiUnwachPostRequest, options?: any) {
    return EsaApiFp(this.configuration)
      .unwachPost(
        requestParameters.teamName,
        requestParameters.postNumber,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定されたコメントを更新します。
   * @summary コメントを更新する
   * @param {EsaApiUpdateCommentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public updateComment(
    requestParameters: EsaApiUpdateCommentRequest,
    options?: any
  ) {
    return EsaApiFp(this.configuration)
      .updateComment(
        requestParameters.teamName,
        requestParameters.commentId,
        requestParameters.updateCommentBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定された記事を編集します。
   * @summary 記事を編集する
   * @param {EsaApiUpdatePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public updatePost(requestParameters: EsaApiUpdatePostRequest, options?: any) {
    return EsaApiFp(this.configuration)
      .updatePost(
        requestParameters.teamName,
        requestParameters.postNumber,
        requestParameters.updatePostBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定された記事にWatchをします。
   * @summary 記事をWatchする
   * @param {EsaApiWatchPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EsaApi
   */
  public watchPost(requestParameters: EsaApiWatchPostRequest, options?: any) {
    return EsaApiFp(this.configuration)
      .watchPost(
        requestParameters.teamName,
        requestParameters.postNumber,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
